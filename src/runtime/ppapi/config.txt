// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// enum <type> <pattern>
//enum AudioBufferSampleRate PP_AUDIOBUFFER_SAMPLERATE_
//enum AudioBufferSampleSize PP_AUDIOBUFFER_SAMPLESIZE_
//enum AudioSampleRate PP_AUDIOSAMPLERATE_
//enum Error PP_(ERROR|OK)_
//enum FileOpenFlag PP_FILEOPENFLAG_
//enum FileType PP_FILETYPE_
//enum FileSystemType PP_FILESYSTEMTYPE_
//enum Graphics3DAttrib PP_GRAPHICS3DATTRIB_
//enum HostResolverFlag PP_HOSTRESOLVER_FLAG_
//enum ImageDataFormat PP_IMAGEDATAFORMAT_
//enum InputEventMouseButton PP_INPUTEVENT_MOUSEBUTTON_
//enum InputEventType PP_INPUTEVENT_TYPE_
//enum LogLevel PP_LOGLEVEL_
//enum MakeDirectoryFlag PP_MAKEDIRECTORYFLAG_
//enum MediaStreamAudioTrackAttrib PP_MEDIASTREAMAUDIOTRACK_ATTRIB_
//enum MediaStreamVideoTrackAttrib PP_MEDIASTREAMVIDEOTRACK_ATTRIB_
//enum MouseCursorType PP_MOUSECURSOR_TYPE_
//enum NetAddressFamily PP_NETADDRESS_FAMILY_
//enum NetworkListState PP_NETWORKLIST_STATE_
//enum NetworkListType PP_NETWORKLIST_TYPE_
//enum TCPSocketOption PP_TCPSOCKET_OPTION_
//enum TextInputType PP_TEXTINPUT_TYPE_
//enum TouchListType PP_TOUCHLIST_TYPE_
//enum UDPSocketOption PP_UDPSOCKET_OPTION_
//enum URLRequestProperty PP_URLREQUESTPROPERTY_
//enum URLResponseProperty PP_URLRESPONSEPROPERTY_
//enum VarType PP_VARTYPE_
//enum VideoFrameFormat PP_VIDEOFRAME_FORMAT_
//enum WebSocketReadyState PP_WEBSOCKETREADYSTATE_
//enum WebSocketCloseCode PP_WEBSOCKETSTATUSCODE_

// type <C type name> <Machine type> [builtin if defined in Go]
//type FloatPoint		struct[8] builtin
//type Point			struct[8] builtin
//type Rect			struct[16] builtin
//type Size			struct[8] builtin
//type pp_ArrayOutput		struct[8]
//type pp_AudioCallback		*
//type pp_Bool			int32
//type pp_CompletionCallback	struct[12]
//type pp_DirectoryEntry	struct[8]
//type pp_FileInfo		struct[40]
//type pp_GamepadSampleData	struct[472]
//type pp_HostResolverHint	struct[8]
//type ImageDataDesc		struct[16] builtin
//type pp_Instance		int32
//type pp_NetAddress_IPv4	struct[6]
//type pp_NetAddress_IPv6	struct[18]
//type pp_Resource		int32
//type pp_Time			float64
//type pp_TimeDelta		float64
//type pp_TimeTicks		float64
//type pp_TouchPoint		struct[28]
//type pp_TouchPoint		struct[28]
//type pp_Var			struct[16]

// callback f(a1 t1, ..., aN, tN) returnType
//callback ppp_graphics3d_context_lost(instance pp_Instance)
//callback ppp_handle_input_event(instance pp_Instance, event pp_Resource) pp_Bool
//callback ppp_did_create(instance pp_Instance, argc uint32, argn **byte, argv **byte) pp_Bool
//callback ppp_did_destroy(instance pp_Instance)
//callback ppp_did_change_view(instance pp_Instance, view pp_Resource)
//callback ppp_did_change_focus(instance pp_Instance, has_focus pp_Bool)
//callback ppp_handle_document_load(instance pp_Instance, url_loader pp_Resource) pp_Bool
//callback ppp_handle_message(instance pp_Instance, msg pp_Var)
//callback ppp_mouse_lock_lost(instance pp_Instance)
//callback get_array_output_buffer(void *alloc, count uint32, size uint32) *byte

// func f(a1 t1, ..., aN, tN) returnType = interface[index]
//func ppb_audio_create(instance pp_Instance, config pp_Resource, callback pp_AudioCallback, user_data *byte) pp_Resource = PPB_AUDIO[0]
//func ppb_audio_is_audio(resource pp_Resource) pp_Bool = PPB_AUDIO[1]
//func ppb_audio_get_current_config(resource pp_Resource) pp_Resource = PPB_AUDIO[2]
//func ppb_audio_start_playback(resource pp_Resource) pp_Bool = PPB_AUDIO[3]
//func ppb_audio_stop_playback(resource pp_Resource) pp_Bool = PPB_AUDIO[4]

//func ppb_audiobuffer_is_audio_buffer(resource pp_Resource) pp_Bool = PPB_AUDIO_BUFFER[0]
//func ppb_audiobuffer_get_timestamp(resource pp_Resource) pp_TimeDelta = PPB_AUDIO_BUFFER[1]
//func ppb_audiobuffer_set_timestamp(resource pp_Resource) = PPB_AUDIO_BUFFER[2]
//func ppb_audiobuffer_get_sample_rate(resource pp_Resource) AudioBufferSampleRate = PPB_AUDIO_BUFFER[3]
//func ppb_audiobuffer_get_sample_size(resource pp_Resource) AudioBufferSampleSize = PPB_AUDIO_BUFFER[4]
//func ppb_audiobuffer_get_number_of_channels(resource pp_Resource) uint32 = PPB_AUDIO_BUFFER[5]
//func ppb_audiobuffer_get_number_of_samples(resource pp_Resource)  uint32 = PPB_AUDIO_BUFFER[6]
//func ppb_audiobuffer_get_data_buffer(resource pp_Resource) *byte = PPB_AUDIO_BUFFER[7]
//func ppb_audiobuffer_get_data_buffer_size(resource pp_Resource) uint32 = PPB_AUDIO_BUFFER[8]
 
//func ppb_audioconfig_create_stereo_16bit(instance pp_Instance, sample_rate uint32, sample_frame_count uint32) pp_Resource  = PPB_AUDIO_CONFIG[0]
//func ppb_audioconfig_recommend_sample_frame_count(instance pp_Instance, sample_rate uint32, requested_sample_frame_count uint32) uint32 = PPB_AUDIO_CONFIG[1]
//func ppb_audioconfig_is_audio_config(resource pp_Resource)  pp_Bool = PPB_AUDIO_CONFIG[2]
//func ppb_audioconfig_get_sample_rate(resource pp_Resource) AudioSampleRate = PPB_AUDIO_CONFIG[3]
//func ppb_audioconfig_get_sample_frame_count(resource pp_Resource) uint32 = PPB_AUDIO_CONFIG[4]
//func ppb_audioconfig_recommend_sample_rate(instance pp_Instance) AudioSampleRate = PPB_AUDIO_CONFIG[5]
 
//func ppb_console_log(instance pp_Instance, level LogLevel, value pp_Var) = PPB_CONSOLE[0]
//func ppb_console_log_with_source(instance pp_Instance, level LogLevel, source pp_Var, value pp_Var) = PPB_CONSOLE[1]
 
//func ppb_core_add_ref_resource(resource pp_Resource) = PPB_CORE[0]
//func ppb_core_release_resource(resource pp_Resource) = PPB_CORE[1]
//func ppb_core_get_time(resource pp_Resource) pp_Time = PPB_CORE[2]
//func ppb_core_get_time_ticks(resource pp_Resource) pp_TimeTicks = PPB_CORE[3]

//func ppb_fileio_create(instance pp_Instance) pp_Resource = PPB_FILE_IO[0]
//func ppb_fileio_is_file_io(resource pp_Resource) pp_Bool = PPB_FILE_IO[1]
//func ppb_fileio_open(file_io pp_Resource, file_ref pp_Resource, open_flags int32, cb pp_CompletionCallback) int32 = PPB_FILE_IO[2]
//func ppb_fileio_query(file_io pp_Resource, info *pp_FileInfo, cb pp_CompletionCallback) int32 = PPB_FILE_IO[3]
//func ppb_fileio_touch(file_io pp_Resource, last_access_time pp_Time, last_modified_time pp_Time, cb pp_CompletionCallback) int32  = PPB_FILE_IO[4]
//func ppb_fileio_read(file_io pp_Resource, offset int64, buf *byte, bytes_to_write int32, cb pp_CompletionCallback) int32 = PPB_FILE_IO[5]
//func ppb_fileio_write(file_io pp_Resource, offset int64, buf *byte, bytes_to_write int32, cb pp_CompletionCallback) int32  = PPB_FILE_IO[6]
//func ppb_fileio_set_length(file_io pp_Resource, length int64, cb pp_CompletionCallback) int32 = PPB_FILE_IO[7]
//func ppb_fileio_flush(file_io pp_Resource, cb pp_CompletionCallback) int32 = PPB_FILE_IO[8]
//func ppb_fileio_close(file_io pp_Resource) = PPB_FILE_IO[9]

//func ppb_fileref_create(fs pp_Resource, path *byte) pp_Resource = PPB_FILE_REF[0]
//func ppb_fileref_is_file_ref(resource pp_Resource) pp_Bool = PPB_FILE_REF[1]
//func ppb_fileref_get_file_system_type(file_ref pp_Resource) FileSystemType = PPB_FILE_REF[2]
//func ppb_fileref_get_name(file_ref pp_Resource) pp_Var = PPB_FILE_REF[3]
//func ppb_fileref_get_path(file_ref pp_Resource) pp_Var = PPB_FILE_REF[4]
//func ppb_fileref_get_parent(file_ref pp_Resource) pp_Resource = PPB_FILE_REF[5]
//func ppb_fileref_make_directory(dir_ref pp_Resource, mkdir_flags int32, cb pp_CompletionCallback) int32 = PPB_FILE_REF[6]
//func ppb_fileref_touch(file_ref pp_Resource, atime pp_Time, mtime pp_Time, cb pp_CompletionCallback) int32 = PPB_FILE_REF[7]
//func ppb_fileref_delete(file_ref pp_Resource, cb pp_CompletionCallback) int32 = PPB_FILE_REF[8]
//func ppb_fileref_rename(file_ref pp_Resource, new_file_ref pp_Resource, cb pp_CompletionCallback) int32 = PPB_FILE_REF[9]
//func ppb_fileref_query(file_ref pp_Resource, info *pp_FileInfo, cb pp_CompletionCallback) int32 = PPB_FILE_REF[10]
//func ppb_fileref_read_directory_entries(file_ref pp_Resource, output pp_ArrayOutput, cb pp_CompletionCallback) int32 = PPB_FILE_REF[11]
 
//func ppb_filesystem_create(instance pp_Instance, ty FileSystemType) pp_Resource = PPB_FILE_SYSTEM[0]
//func ppb_filesystem_is_file_system(resource pp_Resource)  pp_Bool = PPB_FILE_SYSTEM[1]
//func ppb_filesystem_open(resource pp_Resource, expected_size int64, cb pp_CompletionCallback) int32 = PPB_FILE_SYSTEM[2]
//func ppb_filesystem_get_type(resource pp_Resource) FileSystemType = PPB_FILE_SYSTEM[3]

//func ppb_fullscreen_is_fullscreen(instance pp_Instance) pp_Bool = PPB_FULLSCREEN[0]
//func ppb_fullscreen_set_fullscreen(instance pp_Instance, fullscreen pp_Bool) pp_Bool = PPB_FULLSCREEN[1]
//func ppb_fullscreen_get_screen_size(instance pp_Instance, size *Size) pp_Bool = PPB_FULLSCREEN[2]

//func ppb_gamepad_sample(instance pp_Instance, data *pp_GamepadSampleData) = PPB_GAMEPAD[0]
 
//func ppb_graphics2d_create(instance pp_Instance, size *Size, is_always_opaque pp_Bool) pp_Resource = PPB_GRAPHICS2D[0]
//func ppb_graphics2d_is_graphics2d(resource pp_Resource) pp_Bool = PPB_GRAPHICS2D[1]
//func ppb_graphics2d_describe(resource pp_Resource, size *Size, is_always_opaque *pp_Bool) pp_Bool = PPB_GRAPHICS2D[2]
//func ppb_graphics2d_paint_image_data(resource pp_Resource, image_data pp_Resource, top_left *Point, src_rect *Rect) = PPB_GRAPHICS2D[3]
//func ppb_graphics2d_scroll(resource pp_Resource, clip_rect *Rect, amount *Point) *Point = PPB_GRAPHICS2D[4]
//func ppb_graphics2d_replace_contents(resource pp_Resource, image_data pp_Resource) = PPB_GRAPHICS2D[5]
//func ppb_graphics2d_flush(resource pp_Resource, cb pp_CompletionCallback) int32 = PPB_GRAPHICS2D[6]
//func ppb_graphics2d_set_scale(resource pp_Resource, scale float32) pp_Bool = PPB_GRAPHICS2D[7]
//func ppb_graphics2d_get_scale(resource pp_Resource) float32 = PPB_GRAPHICS2D[8]

//func ppb_graphics3d_get_attrib_max_value(instance pp_Instance, attr int32, value *int32) int32 = PPB_GRAPHICS3D[0]
//func ppb_graphics3d_create(instance pp_Instance, share_context pp_Resource, attrib_list *int32) pp_Resource = PPB_GRAPHICS3D[1]
//func ppb_graphics3d_is_graphics3d(resource pp_Resource) pp_Bool = PPB_GRAPHICS3D[2]
//func ppb_graphics3d_get_attribs(resource pp_Resource, attrib_list *int32) int32 = PPB_GRAPHICS3D[3]
//func ppb_graphics3d_set_attribs(resource pp_Resource, attrib_list *int32) int32 = PPB_GRAPHICS3D[4]
//func ppb_graphics3d_get_error(resource pp_Resource) int32 = PPB_GRAPHICS3D[5]
//func ppb_graphics3d_resize_buffers(resource pp_Resource, width int32, height int32) int32 = PPB_GRAPHICS3D[6]

//func ppb_hostresolver_create(instance pp_Instance) pp_Resource = PPB_HOST_RESOLVER[0]
//func ppb_hostresolver_is_host_resolver(resource pp_Resource) pp_Bool = PPB_HOST_RESOLVER[1]
//func ppb_hostresolver_resolve(resolver pp_Resource, host *byte, port uint16, hint *pp_HostResolverHint, cb pp_CompletionCallback) int32 = PPB_HOST_RESOLVER[2]
//func ppb_hostresolver_get_canonical_name(resolver pp_Resource) pp_Var = PPB_HOST_RESOLVER[3]
//func ppb_hostresolver_get_net_address_count(resolver pp_Resource) uint32 = PPB_HOST_RESOLVER[4]
//func ppb_hostresolver_get_net_address(resolver pp_Resource, index uint32) pp_Resource = PPB_HOST_RESOLVER[5]

//func ppb_imagedata_get_native_image_data_format() ImageDataFormat = PPB_IMAGE_DATA[0]
//func ppb_imagedata_is_image_data_supported(format ImageDataFormat) pp_Bool = PPB_IMAGE_DATA[1]
//func ppb_imagedata_create(instance pp_Instance, format ImageDataFormat, size *Size, init_to_zero pp_Bool) pp_Resource = PPB_IMAGE_DATA[2]
//func ppb_imagedata_is_image_data(image_data pp_Resource) pp_Bool = PPB_IMAGE_DATA[3]
//func ppb_imagedata_describe(image_data pp_Resource, desc *ImageDataDesc) pp_Bool = PPB_IMAGE_DATA[4]
//func ppb_imagedata_map(image_data pp_Resource) *byte = PPB_IMAGE_DATA[5]
//func ppb_imagedata_unmap(image_data pp_Resource) = PPB_IMAGE_DATA[6]

//func ppb_inputevent_request_input_events(instance pp_Instance, event_classes uint32) int32 = PPB_INPUT_EVENT[0]
//func ppb_inputevent_request_filtering_input_events(instance pp_Instance, event_classes uint32) int32 = PPB_INPUT_EVENT[1]
//func ppb_inputevent_clear_input_event_request(instance pp_Instance, event_classes uint32) = PPB_INPUT_EVENT[2]
//func ppb_inputevent_is_input_event(resource pp_Resource)  pp_Bool = PPB_INPUT_EVENT[3]
//func ppb_inputevent_get_type(event pp_Resource) InputEventType = PPB_INPUT_EVENT[4]
//func ppb_inputevent_get_time_stamp(event pp_Resource) pp_TimeTicks = PPB_INPUT_EVENT[5]
//func ppb_inputevent_get_modifiers(event pp_Resource) uint32 = PPB_INPUT_EVENT[6]

//func ppb_instance_bind_graphics(instance pp_Instance, device pp_Resource) pp_Bool = PPB_INSTANCE[0]
//func ppb_instance_is_full_frame(instance pp_Instance) pp_Bool = PPB_INSTANCE[1]

//func ppb_keyboardinputevent_create(instance pp_Instance, ty InputEventType, ticks pp_TimeTicks, modifiers uint32, key_code uint32, text pp_Var, code pp_Var) pp_Resource = PPB_KEYBOARD_INPUT_EVENT[0]
//func ppb_keyboardinputevent_is_keyboard_input_event(resource pp_Resource) pp_Bool = PPB_KEYBOARD_INPUT_EVENT[1]
//func ppb_keyboardinputevent_get_key_code(event pp_Resource) uint32 = PPB_KEYBOARD_INPUT_EVENT[2]
//func ppb_keyboardinputevent_get_character_text(event pp_Resource) pp_Var = PPB_KEYBOARD_INPUT_EVENT[3]
//func ppb_keyboardinputevent_get_code(event pp_Resource) pp_Var = PPB_KEYBOARD_INPUT_EVENT[4]

//func ppb_mediastreamaudiotrack_is_media_stream_audio_track(resource pp_Resource) pp_Bool = PPB_MEDIA_STREAM_AUDIO_TRACK[0]
//func ppb_mediastreamaudiotrack_configure(audio_track pp_Resource, attribs *int32, cb pp_CompletionCallback) int32 = PPB_MEDIA_STREAM_AUDIO_TRACK[1]
//func ppb_mediastreamaudiotrack_get_attrib(audio_track pp_Resource, attrib MediaStreamAudioTrackAttrib, value *int32) int32  = PPB_MEDIA_STREAM_AUDIO_TRACK[2]
//func ppb_mediastreamaudiotrack_get_id(audio_track pp_Resource) pp_Var = PPB_MEDIA_STREAM_AUDIO_TRACK[3]
//func ppb_mediastreamaudiotrack_has_ended(audio_track pp_Resource) pp_Bool = PPB_MEDIA_STREAM_AUDIO_TRACK[4]
//func ppb_mediastreamaudiotrack_get_buffer(audio_track pp_Resource, buffer *pp_Resource, cb pp_CompletionCallback) int32 = PPB_MEDIA_STREAM_AUDIO_TRACK[5]
//func ppb_mediastreamaudiotrack_recycle_buffer(audio_track pp_Resource, buffer pp_Resource) int32 = PPB_MEDIA_STREAM_AUDIO_TRACK[6]
//func ppb_mediastreamaudiotrack_close(audio_track pp_Resource) = PPB_MEDIA_STREAM_AUDIO_TRACK[7]

//func ppb_mediastreamvideotrack_is_media_stream_video_track(resource pp_Resource) pp_Bool = PPB_MEDIA_STREAM_VIDEO_TRACK[0]
//func ppb_mediastreamvideotrack_configure(video_track pp_Resource, attribs *int32, cb pp_CompletionCallback)  int32 = PPB_MEDIA_STREAM_VIDEO_TRACK[1]
//func ppb_mediastreamvideotrack_get_attrib(video_track pp_Resource, attrib MediaStreamVideoTrackAttrib, value *int32) int32  = PPB_MEDIA_STREAM_VIDEO_TRACK[2]
//func ppb_mediastreamvideotrack_get_id(video_track pp_Resource) pp_Var = PPB_MEDIA_STREAM_VIDEO_TRACK[3]
//func ppb_mediastreamvideotrack_has_ended(video_track pp_Resource) pp_Bool = PPB_MEDIA_STREAM_VIDEO_TRACK[4]
//func ppb_mediastreamvideotrack_get_buffer(video_track pp_Resource, buffer *pp_Resource, cb pp_CompletionCallback) int32 = PPB_MEDIA_STREAM_VIDEO_TRACK[5]
//func ppb_mediastreamvideotrack_recycle_frame(video_track pp_Resource, buffer pp_Resource) int32 = PPB_MEDIA_STREAM_VIDEO_TRACK[6]
//func ppb_mediastreamvideotrack_close(video_track pp_Resource) = PPB_MEDIA_STREAM_VIDEO_TRACK[7]

//func ppb_messaging_post_message(instance pp_Instance, msg pp_Var) = PPB_MESSAGING[0]

//func ppb_mouse_cursor_set_cursor(instance pp_Instance, ty MouseCursorType, image pp_Resource, hot_spot *Point) pp_Bool = PPB_MOUSE_CURSOR[0]

//func ppb_mouseinputevent_create(instance pp_Instance, ty InputEventType, ticks pp_TimeTicks, modifiers uint32, button InputEventMouseButton, position *Point, clicks int32, movement *Point) pp_Resource = PPB_MOUSE_INPUT_EVENT[0]
//func ppb_mouseinputevent_is_mouse_input_event(resource pp_Resource) pp_Bool = PPB_MOUSE_INPUT_EVENT[1]
//func ppb_mouseinputevent_get_button(event pp_Resource) InputEventMouseButton = PPB_MOUSE_INPUT_EVENT[2]
//func ppb_mouseinputevent_get_position(event pp_Resource) Point = PPB_MOUSE_INPUT_EVENT[3]
//func ppb_mouseinputevent_get_click_count(event pp_Resource) int32 = PPB_MOUSE_INPUT_EVENT[4]
//func ppb_mouseinputevent_get_movement(event pp_Resource) Point = PPB_MOUSE_INPUT_EVENT[5]

//func ppb_mouselock_lock_mouse(instance pp_Instance, cb pp_CompletionCallback) int32 = PPB_MOUSE_LOCK[0]
//func ppb_mouselock_unlock_mouse(instance pp_Instance) = PPB_MOUSE_LOCK[1]

//func ppb_netaddress_create_from_ipv4_address(instance pp_Instance, addr *pp_NetAddress_IPv4) pp_Resource = PPB_NET_ADDRESS[0]
//func ppb_netaddress_create_from_ipv6_address(instance pp_Instance, addr *pp_NetAddress_IPv6) pp_Resource = PPB_NET_ADDRESS[1]
//func ppb_netaddress_is_net_address(resource pp_Resource) pp_Bool = PPB_NET_ADDRESS[2]
//func ppb_netaddress_get_family(addr pp_Resource) NetAddressFamily = PPB_NET_ADDRESS[3]
//func ppb_netaddress_describe_as_string(addr pp_Resource, include_port pp_Bool) pp_Var = PPB_NET_ADDRESS[4]
//func ppb_netaddress_describe_as_ipv4_address(addr pp_Resource, ipv4 *pp_NetAddress_IPv4) pp_Bool = PPB_NET_ADDRESS[5]
//func ppb_netaddress_describe_as_ipv6_address(addr pp_Resource, ipv6 *pp_NetAddress_IPv6) pp_Bool = PPB_NET_ADDRESS[6]

//func ppb_networklist_is_network_list(resource pp_Resource) pp_Bool = PPB_NETWORK_LIST[0]
//func ppb_networklist_get_count(resource pp_Resource) uint32 = PPB_NETWORK_LIST[1]
//func ppb_networklist_get_name(resource pp_Resource, index uint32) pp_Var = PPB_NETWORK_LIST[2]
//func ppb_networklist_get_type(resourc pp_Resource, index uint32) NetworkListType = PPB_NETWORK_LIST[3]
//func ppb_networklist_get_state(resource pp_Resource, index uint32) NetworkListState = PPB_NETWORK_LIST[4]
//func ppb_networklist_get_ip_addresses(resource pp_Resource, index uint32, output *pp_ArrayOutput) int32 = PPB_NETWORK_LIST[5]
//func ppb_networklist_get_display_name(resource pp_Resource, index uint32) pp_Var = PPB_NETWORK_LIST[6]
//func ppb_networklist_get_mtu(resource pp_Resource, index uint32) uint32 = PPB_NETWORK_LIST[7]

//func ppb_network_monitor_create(instance pp_Instance) pp_Resource = PPB_NETWORK_MONITOR[0]
//func ppb_network_monitor_update_network_list(monitor pp_Resource, network_list *pp_Resource, cb pp_CompletionCallback) int32 = PPB_NETWORK_MONITOR[1]
//func ppb_network_monitor_is_network_monitor(resource pp_Resource) pp_Bool = PPB_NETWORK_MONITOR[2]

//func ppb_networkproxy_get_proxy_for_url(instance pp_Instance, url pp_Var, proxy_string *pp_Var, cb pp_CompletionCallback) int32 = PPB_NETWORK_PROXY[0]

//func ppb_tcpsocket_create(instance pp_Instance) pp_Resource = PPB_TCP_SOCKET[0]
//func ppb_tcpsocket_is_tcp_socket(resource pp_Resource) pp_Bool = PPB_TCP_SOCKET[1]
//func ppb_tcpsocket_bind(socket pp_Resource, addr pp_Resource, cb pp_CompletionCallback) int32 = PPB_TCP_SOCKET[2]
//func ppb_tcpsocket_connect(socket pp_Resource, addr pp_Resource, cb pp_CompletionCallback) int32 = PPB_TCP_SOCKET[3]
//func ppb_tcpsocket_get_local_address(socket pp_Resource) pp_Resource = PPB_TCP_SOCKET[4]
//func ppb_tcpsocket_get_remote_address(socket pp_Resource) pp_Resource = PPB_TCP_SOCKET[5]
//func ppb_tcpsocket_read(socket pp_Resource, buf *byte, bytes_to_read int32, cb pp_CompletionCallback) int32 = PPB_TCP_SOCKET[6]
//func ppb_tcpsocket_write(socket pp_Resource, buf *byte, bytes_to_write int32, cb pp_CompletionCallback) int32 = PPB_TCP_SOCKET[7]
//func ppb_tcpsocket_listen(socket pp_Resource, backlog int32, cb pp_CompletionCallback) int32 = PPB_TCP_SOCKET[8]
//func ppb_tcpsocket_accept(socket pp_Resource, accepted *pp_Resource, cb pp_CompletionCallback) int32 = PPB_TCP_SOCKET[9]
//func ppb_tcpsocket_close(socket pp_Resource) = PPB_TCP_SOCKET[10]
//func ppb_tcpsocket_set_option(socket pp_Resource, name TCPSocketOption, value pp_Var, cb pp_CompletionCallback) int32 = PPB_TCP_SOCKET[11]

//func ppb_textinputcontroller_set_text_input_type(instance pp_Instance, ty TextInputType) = PPB_TEXT_INPUT_CONTROLLER[0]
//func ppb_textinputcontroller_update_caret_position(instance pp_Instance, caret *Rect) = PPB_TEXT_INPUT_CONTROLLER[1]
//func ppb_textinputcontroller_cancel_composition_text(instance pp_Instance) = PPB_TEXT_INPUT_CONTROLLER[2]
//func ppb_textinputcontroller_update_surrounding_text(instance pp_Instance, text pp_Var, caret uint32, anchor uint32) = PPB_TEXT_INPUT_CONTROLLER[3]

//func ppb_touchinput_event_create(instance pp_Instance, ty InputEventType, time_stamp pp_TimeTicks, modifiers uint32) pp_Resource = PPB_TOUCH_INPUT_EVENT[0]
//func ppb_touchinput_event_add_touch_point(event pp_Resource, list TouchListType, point *pp_TouchPoint) = PPB_TOUCH_INPUT_EVENT[1]
//func ppb_touchinput_event_is_touch_input_event(resource pp_Resource) pp_Bool = PPB_TOUCH_INPUT_EVENT[2]
//func ppb_touchinput_event_get_touch_count(resource pp_Resource, list TouchListType) uint32 = PPB_TOUCH_INPUT_EVENT[3]
//func ppb_touchinput_event_get_touch_by_index(resource pp_Resource, list TouchListType, index uint32) pp_TouchPoint = PPB_TOUCH_INPUT_EVENT[4]
//func ppb_touchinput_event_get_touch_by_id(resource pp_Resource, list TouchListType, id uint32) pp_TouchPoint = PPB_TOUCH_INPUT_EVENT[5]

//func ppb_udpsocket_create(instance pp_Instance) pp_Resource = PPB_UDP_SOCKET[0]
//func ppb_udpsocket_is_udp_socket(resource pp_Resource) pp_Bool = PPB_UDP_SOCKET[1]
//func ppb_udpsocket_bind(socket pp_Resource, addr pp_Resource, cb pp_CompletionCallback) int32 = PPB_UDP_SOCKET[2]
//func ppb_udpsocket_get_bound_address(socket pp_Resource) pp_Resource = PPB_UDP_SOCKET[3]
//func ppb_udpsocket_recvfrom(socket pp_Resource, buf *byte, num_bytes int32, addr *pp_Resource, cb pp_CompletionCallback) int32 = PPB_UDP_SOCKET[4]
//func ppb_udpsocket_sendto(socket pp_Resource, buf *byte, num_bytes int32, addr pp_Resource, cb pp_CompletionCallback) int32 = PPB_UDP_SOCKET[5]
//func ppb_udpsocket_close(socket pp_Resource) = PPB_UDP_SOCKET[6]
//func ppb_udpsocket_set_option(socket pp_Resource, opt UDPSocketOption, value pp_Var, cb pp_CompletionCallback) int32 = PPB_UDP_SOCKET[7]

//func ppb_urlloader_create(instance pp_Instance) pp_Resource = PPB_URL_LOADER[0]
//func ppb_urlloader_is_url_loader(resource pp_Resource) pp_Bool = PPB_URL_LOADER[1]
//func ppb_urlloader_open(loader pp_Resource, request pp_Resource, cb pp_CompletionCallback) int32 = PPB_URL_LOADER[2]
//func ppb_urlloader_follow_redirect(loader pp_Resource, cb pp_CompletionCallback) int32 = PPB_URL_LOADER[3]
//func ppb_urlloader_get_upload_progress(loader pp_Resource, bytes_sent *int64, total_bytes *int64) pp_Bool = PPB_URL_LOADER[4]
//func ppb_urlloader_get_download_progress(loader pp_Resource, bytes_received *int64, total_bytes *int64) pp_Bool = PPB_URL_LOADER[5]
//func ppb_urlloader_get_response_info(loader pp_Resource) pp_Resource = PPB_URL_LOADER[6]
//func ppb_urlloader_read_response_body(loader pp_Resource, buf *byte, bytes_to_read int32, cb pp_CompletionCallback) int32 = PPB_URL_LOADER[7]
//func ppb_urlloader_finish_streaming_to_file(loader pp_Resource, cb pp_CompletionCallback) int32 = PPB_URL_LOADER[8]
//func ppb_urlloader_close(loader pp_Resource) = PPB_URL_LOADER[9]

//func ppb_urlrequestinfo_create(instance pp_Instance) pp_Resource = PPB_URL_REQUEST_INFO[0]
//func ppb_urlrequestinfo_is_url_request_info(resource pp_Resource) pp_Bool = PPB_URL_REQUEST_INFO[1]
//func ppb_urlrequestinfo_set_property(request pp_Resource, property URLRequestProperty, value pp_Var) pp_Bool = PPB_URL_REQUEST_INFO[2]
//func ppb_urlrequestinfo_append_data_to_body(request pp_Resource, data *byte, len uint32) pp_Bool = PPB_URL_REQUEST_INFO[3]
//func ppb_urlrequestinfo_append_file_to_body(request pp_Resource, file_ref pp_Resource, off int64, len int64, expected_mtime pp_Time) pp_Bool = PPB_URL_REQUEST_INFO[4]

//func ppb_urlresponseinfo_is_url_response_info(resource pp_Resource) pp_Bool = PPB_URL_RESPONSE_INFO[0]
//func ppb_urlresponseinfo_get_property(response pp_Resource, property URLResponseProperty) pp_Var = PPB_URL_RESPONSE_INFO[1]
//func ppb_urlresponseinfo_get_body_as_file_ref(response pp_Resource) pp_Resource = PPB_URL_RESPONSE_INFO[2]

//func ppb_var_add_ref(v pp_Var) = PPB_VAR[0]
//func ppb_var_release(v pp_Var) = PPB_VAR[1]
//func ppb_var_from_utf8(data *byte, len uint32) pp_Var = PPB_VAR[2]
//func ppb_var_to_utf8(v pp_Var, len *uint32) *byte = PPB_VAR[3]
//func ppb_var_to_resource(v pp_Var) pp_Resource = PPB_VAR[4]
//func ppb_var_from_resource(resource pp_Resource) pp_Var = PPB_VAR[5]

//func ppb_vararray_create() pp_Var = PPB_VAR_ARRAY[0]
//func ppb_vararray_get(array pp_Var, index uint32) pp_Var = PPB_VAR_ARRAY[1]
//func ppb_vararray_set(array pp_Var, index uint32, v pp_Var) pp_Bool = PPB_VAR_ARRAY[2]
//func ppb_vararray_get_length(array pp_Var) uint32 = PPB_VAR_ARRAY[3]
//func ppb_vararray_set_length(array pp_Var, len uint32) pp_Bool = PPB_VAR_ARRAY[4]

//func ppb_vararraybuffer_create(size_in_bytes uint32) pp_Var = PPB_VAR_ARRAY_BUFFER[0]
//func ppb_vararraybuffer_byte_length(array pp_Var, byte_length *uint32) pp_Bool = PPB_VAR_ARRAY_BUFFER[1]
//func ppb_vararraybuffer_map(array pp_Var) *byte = PPB_VAR_ARRAY_BUFFER[2]
//func ppb_vararraybuffer_unmap(array pp_Var) = PPB_VAR_ARRAY_BUFFER[3]

//func ppb_vardictionary_create() pp_Var = PPB_VAR_DICTIONARY[0]
//func ppb_vardictionary_get(dict pp_Var, key pp_Var) pp_Var = PPB_VAR_DICTIONARY[1]
//func ppb_vardictionary_set(dict pp_Var, key pp_Var, value pp_Var) pp_Bool = PPB_VAR_DICTIONARY[2]
//func ppb_vardictionary_delete(dict pp_Var, key pp_Var) = PPB_VAR_DICTIONARY[3]
//func ppb_vardictionary_has_key(dict pp_Var, key pp_Var) pp_Bool = PPB_VAR_DICTIONARY[4]
//func ppb_vardictionary_get_keys(dict pp_Var) pp_Var = PPB_VAR_DICTIONARY[5]

//func ppb_videoframe_is_video_frame(resource pp_Resource) pp_Bool = PPB_VIDEO_FRAME[0]
//func ppb_videoframe_get_timestamp(frame pp_Resource) pp_TimeDelta = PPB_VIDEO_FRAME[1]
//func ppb_videoframe_set_timestamp(frame pp_Resource, timestamp pp_TimeDelta) = PPB_VIDEO_FRAME[2]
//func ppb_videoframe_get_format(frame pp_Resource) VideoFrameFormat = PPB_VIDEO_FRAME[3]
//func ppb_videoframe_get_size(frame pp_Resource, size *Size) pp_Bool = PPB_VIDEO_FRAME[4]
//func ppb_videoframe_get_data_buffer(frame pp_Resource) *byte = PPB_VIDEO_FRAME[5]
//func ppb_videoframe_get_data_buffer_size(frame pp_Resource) uint32 = PPB_VIDEO_FRAME[6]

//func ppb_view_is_view(resource pp_Resource) pp_Bool = PPB_VIEW[0]
//func ppb_view_get_rect(resource pp_Resource, rect *Rect) pp_Bool = PPB_VIEW[1]
//func ppb_view_is_fullscreen(resource pp_Resource) pp_Bool = PPB_VIEW[2]
//func ppb_view_is_visible(resource pp_Resource) pp_Bool = PPB_VIEW[3]
//func ppb_view_is_page_visible(resource pp_Resource) pp_Bool = PPB_VIEW[4]
//func ppb_view_get_clip_rect(resource pp_Resource, clip *Rect) pp_Bool = PPB_VIEW[5]
//func ppb_view_get_device_scale(resource pp_Resource) float32 = PPB_VIEW[6]
//func ppb_view_get_css_scale(resource pp_Resource) float32 = PPB_VIEW[7]
 
//func ppb_websocket_create(instance pp_Instance) pp_Resource = PPB_WEB_SOCKET[0]
//func ppb_websocket_is_web_socket(resource pp_Resource) pp_Bool = PPB_WEB_SOCKET[1]
//func ppb_websocket_connect(socket pp_Resource, url pp_Var, protocols *pp_Var, protocol_count uint32, cb pp_CompletionCallback) int32 = PPB_WEB_SOCKET[2]
//func ppb_websocket_close(socket pp_Resource, code uint16, reason pp_Var, cb pp_CompletionCallback) int32 = PPB_WEB_SOCKET[3]
//func ppb_websocket_receive_message(socket pp_Resource, message *pp_Var, cb pp_CompletionCallback) int32 = PPB_WEB_SOCKET[4]
//func ppb_websocket_send_message(socket pp_Resource, msg pp_Var) int32 = PPB_WEB_SOCKET[5]
//func ppb_websocket_get_buffered_amount(socket pp_Resource) uint64 = PPB_WEB_SOCKET[6]
//func ppb_websocket_get_close_cose(socket pp_Resource) uint16 = PPB_WEB_SOCKET[7]
//func ppb_websocket_get_close_reason(socket pp_Resource) pp_Var = PPB_WEB_SOCKET[8]
//func ppb_websocket_get_close_was_clean(socket pp_Resource) pp_Bool = PPB_WEB_SOCKET[9]
//func ppb_websocket_get_extensions(socket pp_Resource) pp_Var = PPB_WEB_SOCKET[10]
//func ppb_websocket_get_protocol(socket pp_Resource) pp_Var = PPB_WEB_SOCKET[11]
//func ppb_websocket_get_ready_state(socket pp_Resource) WebSocketReadyState = PPB_WEB_SOCKET[12]
//func ppb_websocket_get_url(socket pp_Resource) pp_Var = PPB_WEB_SOCKET[13]

//func ppb_wheelinputevent_create(instance pp_Instance, time_stamp pp_TimeTicks, modifiers uint32, wheel_delta *FloatPoint, wheel_tick *FloatPoint, scroll_by_page pp_Bool) pp_Resource = PPB_WHEEL_INPUT_EVENT[0]
//func ppb_wheelinputevent_is_wheel_input_event(resource pp_Resource) pp_Bool = PPB_WHEEL_INPUT_EVENT[1]
//func ppb_wheelinputevent_get_delta(event pp_Resource) FloatPoint = PPB_WHEEL_INPUT_EVENT[2]
//func ppb_wheelinputevent_get_ticks(event pp_Resource) FloatPoint = PPB_WHEEL_INPUT_EVENT[3]
//func ppb_wheelinputevent_get_scroll_by_page(event pp_Resource) pp_Bool = PPB_WHEEL_INPUT_EVENT[4]
